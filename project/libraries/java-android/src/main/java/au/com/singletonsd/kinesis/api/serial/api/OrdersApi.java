/*
 * Kinesis Code Exercise API
 * This is an API to interact with Kineses Code Exercise API # Introduction This API allow to create, modify and delete products, discounts, and orders. # User Authentication This API does not contain any kind of user validation but It request to have a valid authentication user to interact with it. For more information about user Authentication, please refer to [Kinesis Authentication API](https://auth.kinesis.singleton.com.au/). 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: patoperpetua@singletonsd.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package au.com.singletonsd.kinesis.api.serial.api;

import au.com.singletonsd.kinesis.api.serial.api.ApiCallback;
import au.com.singletonsd.kinesis.api.serial.api.ApiClient;
import au.com.singletonsd.kinesis.api.serial.api.ApiException;
import au.com.singletonsd.kinesis.api.serial.api.ApiResponse;
import au.com.singletonsd.kinesis.api.serial.api.Configuration;
import au.com.singletonsd.kinesis.api.serial.api.Pair;
import au.com.singletonsd.kinesis.api.serial.api.ProgressRequestBody;
import au.com.singletonsd.kinesis.api.serial.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import au.com.singletonsd.kinesis.api.serial.model.CustomError;
import au.com.singletonsd.kinesis.api.serial.model.Deleted;
import au.com.singletonsd.kinesis.api.serial.model.Orders;
import au.com.singletonsd.kinesis.api.serial.model.Products;
import au.com.singletonsd.kinesis.api.serial.model.ResponseGetOrder;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrdersApi {
    private ApiClient localVarApiClient;

    public OrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addOrder
     * @param orders  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrderCall(Orders orders, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = orders;

        // create path and map variables
        String localVarPath = "/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "bearer_auth", "main_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrderValidateBeforeCall(Orders orders, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orders' is set
        if (orders == null) {
            throw new ApiException("Missing the required parameter 'orders' when calling addOrder(Async)");
        }
        

        okhttp3.Call localVarCall = addOrderCall(orders, _callback);
        return localVarCall;

    }

    /**
     * Add one order.
     * Add one order.
     * @param orders  (required)
     * @return Orders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public Orders addOrder(Orders orders) throws ApiException {
        ApiResponse<Orders> localVarResp = addOrderWithHttpInfo(orders);
        return localVarResp.getData();
    }

    /**
     * Add one order.
     * Add one order.
     * @param orders  (required)
     * @return ApiResponse&lt;Orders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Orders> addOrderWithHttpInfo(Orders orders) throws ApiException {
        okhttp3.Call localVarCall = addOrderValidateBeforeCall(orders, null);
        Type localVarReturnType = new TypeToken<Orders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add one order. (asynchronously)
     * Add one order.
     * @param orders  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrderAsync(Orders orders, final ApiCallback<Orders> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrderValidateBeforeCall(orders, _callback);
        Type localVarReturnType = new TypeToken<Orders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addProductOrder
     * @param id id to delete or search (required)
     * @param products  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProductOrderCall(Long id, Products products, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = products;

        // create path and map variables
        String localVarPath = "/orders/{id}/scan"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "bearer_auth", "main_auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addProductOrderValidateBeforeCall(Long id, Products products, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addProductOrder(Async)");
        }
        
        // verify the required parameter 'products' is set
        if (products == null) {
            throw new ApiException("Missing the required parameter 'products' when calling addProductOrder(Async)");
        }
        

        okhttp3.Call localVarCall = addProductOrderCall(id, products, _callback);
        return localVarCall;

    }

    /**
     * Add one product to order.
     * Add product to order.
     * @param id id to delete or search (required)
     * @param products  (required)
     * @return Orders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public Orders addProductOrder(Long id, Products products) throws ApiException {
        ApiResponse<Orders> localVarResp = addProductOrderWithHttpInfo(id, products);
        return localVarResp.getData();
    }

    /**
     * Add one product to order.
     * Add product to order.
     * @param id id to delete or search (required)
     * @param products  (required)
     * @return ApiResponse&lt;Orders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Orders> addProductOrderWithHttpInfo(Long id, Products products) throws ApiException {
        okhttp3.Call localVarCall = addProductOrderValidateBeforeCall(id, products, null);
        Type localVarReturnType = new TypeToken<Orders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add one product to order. (asynchronously)
     * Add product to order.
     * @param id id to delete or search (required)
     * @param products  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProductOrderAsync(Long id, Products products, final ApiCallback<Orders> _callback) throws ApiException {

        okhttp3.Call localVarCall = addProductOrderValidateBeforeCall(id, products, _callback);
        Type localVarReturnType = new TypeToken<Orders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrder
     * @param id id to delete or search (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrderCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "bearer_auth", "main_auth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrderValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrder(Async)");
        }
        

        okhttp3.Call localVarCall = deleteOrderCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete one order.
     * Delete one order.
     * @param id id to delete or search (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public Long deleteOrder(Long id) throws ApiException {
        ApiResponse<Long> localVarResp = deleteOrderWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete one order.
     * Delete one order.
     * @param id id to delete or search (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Long> deleteOrderWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteOrderValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete one order. (asynchronously)
     * Delete one order.
     * @param id id to delete or search (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrderAsync(Long id, final ApiCallback<Long> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrderValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editOrder
     * @param id id to delete or search (required)
     * @param orders  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editOrderCall(Long id, Orders orders, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = orders;

        // create path and map variables
        String localVarPath = "/orders/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "bearer_auth", "main_auth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editOrderValidateBeforeCall(Long id, Orders orders, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling editOrder(Async)");
        }
        
        // verify the required parameter 'orders' is set
        if (orders == null) {
            throw new ApiException("Missing the required parameter 'orders' when calling editOrder(Async)");
        }
        

        okhttp3.Call localVarCall = editOrderCall(id, orders, _callback);
        return localVarCall;

    }

    /**
     * Edit one order.
     * Edit one order.
     * @param id id to delete or search (required)
     * @param orders  (required)
     * @return Orders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public Orders editOrder(Long id, Orders orders) throws ApiException {
        ApiResponse<Orders> localVarResp = editOrderWithHttpInfo(id, orders);
        return localVarResp.getData();
    }

    /**
     * Edit one order.
     * Edit one order.
     * @param id id to delete or search (required)
     * @param orders  (required)
     * @return ApiResponse&lt;Orders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Orders> editOrderWithHttpInfo(Long id, Orders orders) throws ApiException {
        okhttp3.Call localVarCall = editOrderValidateBeforeCall(id, orders, null);
        Type localVarReturnType = new TypeToken<Orders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit one order. (asynchronously)
     * Edit one order.
     * @param id id to delete or search (required)
     * @param orders  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editOrderAsync(Long id, Orders orders, final ApiCallback<Orders> _callback) throws ApiException {

        okhttp3.Call localVarCall = editOrderValidateBeforeCall(id, orders, _callback);
        Type localVarReturnType = new TypeToken<Orders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderById
     * @param id id to delete or search (required)
     * @param deleted Get all, deleted, not deleted data. Default not deleted. (optional, default to ACTIVE)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderByIdCall(Long id, Deleted deleted, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "bearer_auth", "main_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderByIdValidateBeforeCall(Long id, Deleted deleted, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrderById(Async)");
        }
        

        okhttp3.Call localVarCall = getOrderByIdCall(id, deleted, _callback);
        return localVarCall;

    }

    /**
     * Get one order.
     * Get one order.
     * @param id id to delete or search (required)
     * @param deleted Get all, deleted, not deleted data. Default not deleted. (optional, default to ACTIVE)
     * @return Orders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public Orders getOrderById(Long id, Deleted deleted) throws ApiException {
        ApiResponse<Orders> localVarResp = getOrderByIdWithHttpInfo(id, deleted);
        return localVarResp.getData();
    }

    /**
     * Get one order.
     * Get one order.
     * @param id id to delete or search (required)
     * @param deleted Get all, deleted, not deleted data. Default not deleted. (optional, default to ACTIVE)
     * @return ApiResponse&lt;Orders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Orders> getOrderByIdWithHttpInfo(Long id, Deleted deleted) throws ApiException {
        okhttp3.Call localVarCall = getOrderByIdValidateBeforeCall(id, deleted, null);
        Type localVarReturnType = new TypeToken<Orders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get one order. (asynchronously)
     * Get one order.
     * @param id id to delete or search (required)
     * @param deleted Get all, deleted, not deleted data. Default not deleted. (optional, default to ACTIVE)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderByIdAsync(Long id, Deleted deleted, final ApiCallback<Orders> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderByIdValidateBeforeCall(id, deleted, _callback);
        Type localVarReturnType = new TypeToken<Orders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrders
     * @param skip number of item to skip (optional, default to 0)
     * @param limit max records to return (optional, default to 10)
     * @param sort sort by property. (optional)
     * @param deleted Get all, deleted, not deleted data. Default not deleted. (optional, default to ACTIVE)
     * @param metadata If metadata is needed (for pagination controls) (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  * Limit -  <br>  * Remaining -  <br>  * Reset -  <br>  </td></tr>
        <tr><td> 204 </td><td> Response is empty. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrdersCall(Integer skip, Integer limit, String sort, Deleted deleted, Boolean metadata, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (deleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleted", deleted));
        }

        if (metadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata", metadata));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "bearer_auth", "main_auth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrdersValidateBeforeCall(Integer skip, Integer limit, String sort, Deleted deleted, Boolean metadata, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getOrdersCall(skip, limit, sort, deleted, metadata, _callback);
        return localVarCall;

    }

    /**
     * Get all orders.
     * Get all orders.
     * @param skip number of item to skip (optional, default to 0)
     * @param limit max records to return (optional, default to 10)
     * @param sort sort by property. (optional)
     * @param deleted Get all, deleted, not deleted data. Default not deleted. (optional, default to ACTIVE)
     * @param metadata If metadata is needed (for pagination controls) (optional, default to false)
     * @return ResponseGetOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  * Limit -  <br>  * Remaining -  <br>  * Reset -  <br>  </td></tr>
        <tr><td> 204 </td><td> Response is empty. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public ResponseGetOrder getOrders(Integer skip, Integer limit, String sort, Deleted deleted, Boolean metadata) throws ApiException {
        ApiResponse<ResponseGetOrder> localVarResp = getOrdersWithHttpInfo(skip, limit, sort, deleted, metadata);
        return localVarResp.getData();
    }

    /**
     * Get all orders.
     * Get all orders.
     * @param skip number of item to skip (optional, default to 0)
     * @param limit max records to return (optional, default to 10)
     * @param sort sort by property. (optional)
     * @param deleted Get all, deleted, not deleted data. Default not deleted. (optional, default to ACTIVE)
     * @param metadata If metadata is needed (for pagination controls) (optional, default to false)
     * @return ApiResponse&lt;ResponseGetOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  * Limit -  <br>  * Remaining -  <br>  * Reset -  <br>  </td></tr>
        <tr><td> 204 </td><td> Response is empty. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseGetOrder> getOrdersWithHttpInfo(Integer skip, Integer limit, String sort, Deleted deleted, Boolean metadata) throws ApiException {
        okhttp3.Call localVarCall = getOrdersValidateBeforeCall(skip, limit, sort, deleted, metadata, null);
        Type localVarReturnType = new TypeToken<ResponseGetOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all orders. (asynchronously)
     * Get all orders.
     * @param skip number of item to skip (optional, default to 0)
     * @param limit max records to return (optional, default to 10)
     * @param sort sort by property. (optional)
     * @param deleted Get all, deleted, not deleted data. Default not deleted. (optional, default to ACTIVE)
     * @param metadata If metadata is needed (for pagination controls) (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request OK. </td><td>  * Limit -  <br>  * Remaining -  <br>  * Reset -  <br>  </td></tr>
        <tr><td> 204 </td><td> Response is empty. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Some parameters are missing or badly entered. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity not found. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Illegal input for operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrdersAsync(Integer skip, Integer limit, String sort, Deleted deleted, Boolean metadata, final ApiCallback<ResponseGetOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrdersValidateBeforeCall(skip, limit, sort, deleted, metadata, _callback);
        Type localVarReturnType = new TypeToken<ResponseGetOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
