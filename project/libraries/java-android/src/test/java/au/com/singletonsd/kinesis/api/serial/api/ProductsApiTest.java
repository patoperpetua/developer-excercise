/*
 * Kinesis Code Exercise API
 * This is an API to interact with Kineses Code Exercise API # Introduction This API allow to create, modify and delete products, discounts, and orders. # User Authentication This API does not contain any kind of user validation but It request to have a valid authentication user to interact with it. For more information about user Authentication, please refer to [Kinesis Authentication API](https://auth.kinesis.singleton.com.au/). 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: patoperpetua@singletonsd.com.au
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package au.com.singletonsd.kinesis.api.serial.api;

import au.com.singletonsd.kinesis.api.serial.api.ApiException;
import au.com.singletonsd.kinesis.api.serial.model.CustomError;
import au.com.singletonsd.kinesis.api.serial.model.Deleted;
import au.com.singletonsd.kinesis.api.serial.model.Products;
import au.com.singletonsd.kinesis.api.serial.model.RequestBulkProduct;
import au.com.singletonsd.kinesis.api.serial.model.ResponseGetProduct;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsApi
 */
@Ignore
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    
    /**
     * Add one product.
     *
     * Add one product.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addProductTest() throws ApiException {
        Products products = null;
        Products response = api.addProduct(products);

        // TODO: test validations
    }
    
    /**
     * Add a list of products.
     *
     * Add a list of products.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addProductsTest() throws ApiException {
        RequestBulkProduct requestBulkProduct = null;
        List<Products> response = api.addProducts(requestBulkProduct);

        // TODO: test validations
    }
    
    /**
     * Delete one product.
     *
     * Delete one product.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProductTest() throws ApiException {
        Long id = null;
        Long response = api.deleteProduct(id);

        // TODO: test validations
    }
    
    /**
     * Edit one product.
     *
     * Edit one product.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editProductTest() throws ApiException {
        Long id = null;
        Products products = null;
        Products response = api.editProduct(id, products);

        // TODO: test validations
    }
    
    /**
     * Get one product.
     *
     * Get one product.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductByIdTest() throws ApiException {
        Long id = null;
        Deleted deleted = null;
        Products response = api.getProductById(id, deleted);

        // TODO: test validations
    }
    
    /**
     * Get all products.
     *
     * Get all products.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        Deleted deleted = null;
        Boolean metadata = null;
        ResponseGetProduct response = api.getProducts(page, size, sort, deleted, metadata);

        // TODO: test validations
    }
    
}
